name: Deploy Chat App

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })' --quiet"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 10

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      # Step 3: Debug backend directory
      - name: Debug backend directory
        run: ls -la ./backend

      # Step 4: Install backend dependencies
      - name: Install backend dependencies
        run: npm install
        working-directory: ./backend

      # Step 5: Create .env file securely
      - name: Create .env file
        run: |
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "MONGO_URI=mongodb://localhost:27017/chat-app" >> .env
          echo "USER_INACTIVE=${{ secrets.USER_INACTIVE }}" >> .env
        working-directory: ./backend

      # Step 6: Wait for MongoDB to be ready
      - name: Wait for MongoDB
        run: |
          for i in {1..60}; do
            health_status=$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" $(docker ps -q --filter "ancestor=mongo:5.0"))
            echo "MongoDB health status: $health_status"
            if [ "$health_status" == "healthy" ]; then
              echo "MongoDB is ready!"
              exit 0
            fi
            echo "Waiting for MongoDB..."
            sleep 5
          done
          echo "MongoDB failed to start"
          exit 1

      # Step 7: Debug MongoDB logs if MongoDB fails
      - name: Debug MongoDB logs
        if: failure()
        run: |
          echo "Fetching MongoDB container logs..."
          docker ps -a
          docker logs $(docker ps -q --filter "ancestor=mongo:5.0")

      # Step 8: Start backend server
      - name: Start backend server
        run: |
          nohup npm start &
        working-directory: ./backend

      # Step 9: Install frontend dependencies
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      # Step 10: Build Angular frontend
      - name: Build Angular frontend
        run: npm run build -- --configuration production
        working-directory: ./frontend

      
